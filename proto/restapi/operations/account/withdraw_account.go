package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WithdrawAccountHandlerFunc turns a function with the right signature into a withdraw account handler
type WithdrawAccountHandlerFunc func(WithdrawAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WithdrawAccountHandlerFunc) Handle(params WithdrawAccountParams) middleware.Responder {
	return fn(params)
}

// WithdrawAccountHandler interface for that can handle valid withdraw account params
type WithdrawAccountHandler interface {
	Handle(WithdrawAccountParams) middleware.Responder
}

// NewWithdrawAccount creates a new http.Handler for the withdraw account operation
func NewWithdrawAccount(ctx *middleware.Context, handler WithdrawAccountHandler) *WithdrawAccount {
	return &WithdrawAccount{Context: ctx, Handler: handler}
}

/*WithdrawAccount swagger:route PUT /account/withdrawal/{id} account withdrawAccount

Withdraw some money from some account

*/
type WithdrawAccount struct {
	Context *middleware.Context
	Handler WithdrawAccountHandler
}

func (o *WithdrawAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWithdrawAccountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
