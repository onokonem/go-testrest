package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindAccountByNameHandlerFunc turns a function with the right signature into a find account by name handler
type FindAccountByNameHandlerFunc func(FindAccountByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindAccountByNameHandlerFunc) Handle(params FindAccountByNameParams) middleware.Responder {
	return fn(params)
}

// FindAccountByNameHandler interface for that can handle valid find account by name params
type FindAccountByNameHandler interface {
	Handle(FindAccountByNameParams) middleware.Responder
}

// NewFindAccountByName creates a new http.Handler for the find account by name operation
func NewFindAccountByName(ctx *middleware.Context, handler FindAccountByNameHandler) *FindAccountByName {
	return &FindAccountByName{Context: ctx, Handler: handler}
}

/*FindAccountByName swagger:route GET /account/findByName account findAccountByName

Find Account by name

For the real life it would be better to make all other methods accepting account name as well as account ID

*/
type FindAccountByName struct {
	Context *middleware.Context
	Handler FindAccountByNameHandler
}

func (o *FindAccountByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewFindAccountByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
