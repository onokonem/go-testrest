package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DepositToAccountHandlerFunc turns a function with the right signature into a deposit to account handler
type DepositToAccountHandlerFunc func(DepositToAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DepositToAccountHandlerFunc) Handle(params DepositToAccountParams) middleware.Responder {
	return fn(params)
}

// DepositToAccountHandler interface for that can handle valid deposit to account params
type DepositToAccountHandler interface {
	Handle(DepositToAccountParams) middleware.Responder
}

// NewDepositToAccount creates a new http.Handler for the deposit to account operation
func NewDepositToAccount(ctx *middleware.Context, handler DepositToAccountHandler) *DepositToAccount {
	return &DepositToAccount{Context: ctx, Handler: handler}
}

/*DepositToAccount swagger:route PUT /account/deposit/{id} account depositToAccount

Place some money to some account

*/
type DepositToAccount struct {
	Context *middleware.Context
	Handler DepositToAccountHandler
}

func (o *DepositToAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDepositToAccountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
