package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a simple test rest service implementing very basic accounts man–∞gement system",
    "title": "testrest",
    "contact": {
      "email": "onokonem@gmail.com"
    },
    "license": {
      "name": "GNU GENERAL PUBLIC LICENSE",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/testrest",
  "paths": {
    "/account": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Add a new account",
        "operationId": "addAccount",
        "parameters": [
          {
            "description": "Account to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/account/deposit/{accountID}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Place some money to some account",
        "operationId": "depositToAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Account id to update",
            "name": "accountID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Amount to be placed",
            "name": "amount",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Account not found"
          },
          "500": {
            "description": "Operation error"
          }
        }
      }
    },
    "/account/findByName": {
      "get": {
        "description": "For the real life it would be better to make all other methods accepting account name as well as account ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Find Account by name",
        "operationId": "findAccountByName",
        "parameters": [
          {
            "type": "string",
            "description": "Name to be found",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/account/transfer/{accountID}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Transfer some money from some account to some other account",
        "operationId": "transferBetweenAccounts",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Account id to take money from",
            "name": "accountID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Amount to be transferred",
            "name": "amount",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Account id to place money to",
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Account not found"
          },
          "500": {
            "description": "Operation error"
          }
        }
      }
    },
    "/account/withdrawal/{accountID}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Withdraw some money from some account",
        "operationId": "withdrawAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Account id to update",
            "name": "accountID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Amount to be withdrawed",
            "name": "amount",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/account/{accountID}": {
      "get": {
        "description": "Returns a single account",
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Find account by ID",
        "operationId": "getAccountByID",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of account to return",
            "name": "accountID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Deletes an account",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Account id to delete",
            "name": "accountID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "description": "For the real life paging would be required",
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "list all the accounts available",
        "operationId": "listAccounts",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "ctime": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "mtime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "20 symbols max",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Everything about account(s)",
      "name": "account"
    }
  ]
}`))
}
